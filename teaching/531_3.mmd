Title: Conspiracies and Constraints Create a Conceptual Crisis
Author: Brian W. Smith
Date: 8/30/2019
CSS: bws.css
HTML header:	<script src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>

<!-- Standard header. Change title in metadata -->

[USC Graduate Phonology](531_guide.html) ✳︎ Fall 2019 ✳︎ Smith
***

<div class="title">

[%title]

</div>

{{TOC}}

***

<!-- Content starts below -->

>What is clear is that any serious theory of phonology must rely heavily on well-formedness constraints [...]. What remains in dispute, or in subformal obscurity, is the character of the interaction among the posited well-formedness constraints, as well as the relation between such constraints and whatever derivational rules they are meant to influence. Given the pervasiveness of this unclarity, and the extent to which it impedes understanding even the most basic functioning of the grammar, it is not excessively dramatic to speak of the issues surrounding the role of well-formedness constraints as involving a kind of conceptual crisis at the center of phonological thought.		
> 
>– Prince & Smolensky (1993/2004, p. 1)

# The conspiracy problem: non-combinable rules do the same thing 
- Sometimes different rules seem to be aiming for the same surface pattern.
	- We call this a **conspiracy**: rules are independent but **conspire** to perform a common function. 
- The conspiracy problem was most prominently pointed out by Kisseberth (1970).
- Kisseberth presents a conspiracy of rules in Yawelmani Yokuts. 
	+ The application of the rules all result in the same output structure being avoided.
	- However, the rules in Yawelmani can't be combined using notional conventions in SPE.
	- To combine the rules, Kisseberth proposes the addition of **constraints**, resulting in a shorter grammar that can capture the linguistically significant generalization.

#	The conspiracy in Yawelmani Yokuts 
- Kisseberth (1970) analyzes the data below from Yawelmani Yokuts.
	+ The preferred name for this dialect of Yokuts is now Yolumne.
	+ We won't be discussing some of the rules you might notice in the data: vowel harmony, vowel lowering, shortening/lengthening
- Yawelmani consonant deletion (rules 7, 8, 9 in Kisseberth 1970)
	- Let's write a rule.
	- C ➔ Ø / …?

|Underlying	| Surface | Gloss|
|--|--|--|
|/gitiːn-hnil-a-w/	|[gitenneːlaw]	|	'sing (nonfuture)'|

- Yawelmani vowel epenthesis (rule 3 in Kisseberth 1970)
	+ Let's write a rule to account for epentheiss.
	+ Ø ➔ i / …?

|Underlying	| Surface | Gloss|
|--|--|--|
|/ʔilk-hin/	|[ʔilikhin]	|	'sing (nonfuture)'|
|/lihm-hin/	|[lihimhin]	|	'run (nonfuture)'|
|/ʔilk-al/	|[ʔilkal]	|	'sing (dubitative)'|
|/lihm-al/	|[lihmal]	|	'run (dubitative)'|

|/pulm/		| [poːlum]	| 'husband (subjective)'|
|/pulm-a/	| [polma]	| 'husband (locative)'|

- Yawelmani final vowel deletion (apocope)
	+ This only applies to certain verbal suffixes.
	+ Let's write a rule.
	+ V ➔ Ø / …?

|Underlying	| Surface | Gloss|
|--|--|--|
|/taxaː-kʔa/	| [taxakʔ]	| 'bring'			|
|/taxaː-mi/		| [taxam]	| 'having brought'	|
|/xat-kʔa/		| [xatkʔa]	| 'eat'				|
|/xat-mi/		| [xatmi]	| 'having eaten'	|

- These rules can't be combined using notational conventions. Why not?
- Kisseberth describes these rules as *functionally equivalent* and not *structurally equivalent*. How are they functioanlly equivalent?
 
# An introduction to constraints
- A **constraint** is a "limit" on a derivation, on the application of a rule, or on a representation.
- Since constraints take many different forms, they're difficult to define.
	+ Odden (2011) (in the readings folder as further reading) says that the primary characteristic of a *constraint* in generative linguistics is "not being a rule."
+ Traditionally, constraints have served different (and sometimes interchangeable) functions:
	+ Constraints can **block** the application of a rule.
		* "Don't apply this rule if it meets the following conditions:"
	- Constraints can **trigger** the application of a rule.
		* "Apply this rule if and only if it meets the following conditions:"
	+ Constraints can **filter** out representations, either in the input or the output, preventing the grammar from generating mappings that contain them.
		* "Discard any URs that meet the following conditions:"
		* "Discard any SRs that meet the following conditions:"

# Constraints: blocking
- Kisseberth (1970) proposes using a constraint to simplify the rule system and capture the functional unity of the rules.
	- The rule V ➔ Ø / V + C _ # …
	- … is simplified to V ➔ Ø / + C _ # …
	- … subject to blocking by a constraint we could name *{C,#}C{C,#}.
	- This constraint says that strings containing the sequences CC#, #CC, CCC are not possible outputs of any phonological rule (if the sequences were not present in the input).
	- In other words, a rule cannot create a {C,#}C{C,#} sequence, which violates the constraint.

- Let's think about how to make this into explicit algorithm.
	- How would the new system work for these hypothetical URs?
		+ 	/bada-lu/
		+ 	/bis-lu/
	- What steps are required to evaluate blocking constraints?

# Constraints: triggering
- Kisseberth (1970) also mentions the possibility constraints can trigger rules, although he doesn't formalize it.
	- This means that a rule applies only if it gets rid of a constraint violation.
- For example, what happens if the rule  Ø ➔ i / C _ is triggered by the constraint *{C,#}C{C,#}? 
	- Again, break this down into individual algorithm steps.
	- Consider the hypothetical URs:
		- /talb-hin/
		- /talb-al/

# Conspiracies and constraints: why is this good?
- Kisseberth's central argument is that output constraints give us simpler rules.
- This predicts that rules that participate in conspiracies should be more natural (given the evaluation procedure of SPE), and systems with related rules (simplifiable with constraints) should be more natural than systems with unrelated rules.


#  Another argument for constraints from Shibatani (1973)
- Loanword adaptation shows that speakers have knowledge of the constraints of their language.
	- Speakers apply rules to fix illicit structures in loanwords. 
	- And these rules aren't found in native words. 
	- But functionally related rules and phonotactics are. 
	- “It is the SPC’s [Surface Phonetic Constraints] of his native language which intrude into the pronunciation of a foreign language when an adult learner speaks. The SPC’s are acquired in an early stage of mother-tongue acquisition, and they are deeply rooted in the competence of a native speaker.” (Shibatani 1973 p. 99)
- In Japanese, URs may end in any consonant, but on the surface the only possible codas are a nasal or the first half of a geminate consonant.
	- This restriction results in epenthesis in loanwords.

|---|---|
|peɴ |'pen'|
|doɾesɯ	|'dress'|
|sɯkɯɾipɯto	|'script'|
[Epenthesis in loanwords in Japanese]

- Shibatani argues that Japanese has no V-insertion rule outside of loanwords.
	- URs of native morphemes that end in non-nasal consonants get taken care of in other ways.
	- So how do Japanese speakers know that they should fix foreign words like *dress*?
	- Harder problem: even if Japanese speakers know that they should fix *dress*, how do they know to do it with vowel epenthesis rather than consonant deletion?
	- Hardest problem: even if Japanese speakers know that they should fix *dress* with epenthesis, how do we capture the similarity between this rule and rules that apply in native Japanese words?
- In Korean (still Shibatani), there are no word-initial liquids ([l] or [ɾ]) in SRs of native words.
	- Originally, there were also no underlying word-initial liquids.
	
|---|---|
|nok (sɛk) |'green' from Chinese lok (Middle Chinese, more or less)|
|nam (sɛk) |'blue' from Chinese lam|
|nampʰu|'lamp' (archaic) from Japanese ɺampu (from Eng. lamp)|

- We can observe alternations in some loans that suggest underlying liquids, but initial liquids are avoided (assuming these are really alternations):

|---|---|--|---|---|
|no in| 	'old man'|	vs.|	tʃo ɾo 	   |      'premature old age'|
|nak wɔn|	'paradise'|	   vs.|	kʰwɛ ɾak	|'enjoyment'|

- Why did Korean speakers innovate a rule ɾ ➔ n (or l ➔ n)?

# The duplication problem
- Observation: dynamic processes (e.g., alternations, loanword adaptation) reiterate static restrictions (e.g. phonotactics, morpheme structure constraints)
- This is a variant of the conspiracy problem, called the **duplication problem**.
 - Hypothetical (but realistic) example from McCarthy (2002: 71)
	- Lexical redundancy rule
		- [–back] ➔ [–round]		(if a sound is front it's also unrounded)
	- A fronting process
		- /put + i/ ➔ [piti]
		- /kop + i/ ➔ [kepi]
	- Fronting Rule:
		- V ➔ [–back, –round] / ＿ C~0 i
- The redundancy rule expresses the generalization that front vowels are always unrounded.
	- However, the fronting rule duplicates the same information.
	- Instead of just fronting, it also changes rounding.
- Yawelmani also suffers the duplication problem.
	- It has a Morpheme Structure Condition that requires URs have no underlying CCC clusters… 
	- … and the rules we discussed above re-iterate this requirement, avoiding CCC clusters when they occur as a result of concatenating URs.

# Problems with rules plus constraints: overview
- Previously, we discussed the first sentence of the quote at the top of this handout: "What is clear is that any serious theory of phonology must rely heavily on well-formedness constraints."
- Next, we discuss the second sentence: "What remains in dispute, or in subformal obscurity, is the character of the interaction among the posited well-formedness constraints, as well as the relation between such constraints and whatever derivational rules they are meant to influence."
- Four ways in which the interaction of constraints and rules is in subformal obscurity:
	- Ambiguous triggering
	- Constraint violability
	- Constraint conflict
	- Lookahead

# Ambiguous triggering
- Sometimes there are multiple ways a rule could be triggered by a constraint.
-  What are the different ways the rule  Ø ➔ i / C _ could avoid a CCC sequence in /talbto/
	-  How might we choose between them?

# Constraint violability
- Sometimes a constraint is violated by SRs, even though it seems to have an effect in part of the langauge. 

|Plain|Nominative|Gloss|
|---|---|---|
|ton	|to.ni		|'money'|
|sa.ɾam	|sa.ɾa.mi	|'person'|
|koŋ	|ko.ŋi		|'ball'|
|na.mu	|na.mu.ɡa	|'tree'|
|pʰa.ɾi	|pʰa.ɾi.ɡa	|'fly'|
|kʰo	|kʰo.ɡa		|'nose'|
|ɕ*i	|ɕ*i.ɡa		|'seed'|
|bɔ.tʰɔ	|bɔ.tʰɔ.ga	|'butter'|
[Korean nominative allomorphy]

- What is the distribution of the two allomorphs of the nominative?
- What output structure are they avoiding?
- But what about these words?

|UR	| Plain	|Nominative|Gloss|
|---|---|---|---|
|/salm/	|sam |sal.mi|'life'|
|/talk/	|tak |tal.ɡi |'chicken'|
|/sʌtʰeikʰʌ/|sʌ.tʰe.i.kʰʌ |sʌ.tʰe.i.kʰʌ.ga|'steak|
[More Korean nominative allomorphy]

- If *CC or *VV is a real constraint of Korean, our theory must allow active constraints to be violated.

# Constraint conflict
- Dutch (example from Smith 2002, data originally from Booij 1995)
	- What constraint is triggering what rule?
	
| Foreign word	| Dutch pronunciation	| Gloss |
|---|---|---|
|pa.é.ʎa	|pa.ʔɛ́l.ja	|'paella'|
|a.ór.ta	|a.ʔɔ́r.ta	|'aorta'|
|ka.ún.da	|ka.ʔún.da	|'Kaunda' (first president of Zambia)|

- But Dutch has a constraint *ʔV-stress :

| Foreign	| Dutch pronunciation	| Gloss |
|---|---|---|
|ká.os|xá.os|'chaos'|
|fá.ra.o|fá.ra.o|'pharaoh'|

- What's the problem? How could we fix it?

# Look-ahead
- Is look-ahead necessary when deciding whether to trigger a rule? How far?

- Hypothetical (and unrealistic, but simple) case.
	- What happens to /tab/
	
| Constraint| Rules that could be triggered by the constraint|
| --- | ---|
|*C#	| C ➔ [–voice] |
|		| [-voice] ➔ Ø|

-	An even more extreme example (also a bit silly): things get worse before they get better.
	+ What happens to /omsi/?
	
|Constraint	| Rules that could be triggered by the constraint|
| --- | ---|
|	*CC		|Ø ➔ p / m＿C|
|			|m ➔ Ø / ＿[+lab]|
|			|p ➔ Ø / ＿ C|

# The conceptual crisis
- Since Kisseberth (1970), constraints were taking on a bigger and bigger role. But there were open questions... 
- Why aren't constraints always obeyed?  
- What happens if there's more than one way to satisfy a constraint? 
	- Maybe we need to prioritize the rules that could be triggered
	- Can different constraints prioritize rules differently?  
- Relatedly, what happens when constraints conflict?
	- What if one constraint wants to trigger a rule, but another wants to block it?
	- Must the grammar prioritize constraints?  
- Should a rule be allowed to look ahead in the derivation to see if applying alleviates a constraint violation? (how far?) 
	- Or does the alleviation have to be immediate?
	- Is a rule allowed to make things worse if a later rule will make them better?  
	- Can a constraint prohibit a certain type of change, rather than a certain structure?

# Optimality Theory
- One solution was presented in Prince & Smolensky's (1993) *Optimality Theory* (OT), which solves the problems with combining rules and constraints by getting rid of rules entirely.

| A "derivation" in rule-based grammars with constrints | A "derivation" in an OT |
|:---:|:---:|
|start with UR/input (from mental lexicon, maybe after morphology)||

|apply rules in sequence | apply all possible rules,</br> producing a (large!) set of candidate outputs |

|constraints may block or trigger rules | constraints pick the best candidate |

|look-ahead: nonexistent or sketchy | candidate outputs are (potential) surface forms,</br> giving full look-ahead to end of each possible derivation |

|interaction of constraints: nonexistent or sketchy |constraints interact through strict domination |

|similarity to UR results </br>from not applying too many rules,</br>not having too many constraints | similarity to UR is enforced by faithfulness constraints|

|end with SR/output (send it to the phonetic system) ||

